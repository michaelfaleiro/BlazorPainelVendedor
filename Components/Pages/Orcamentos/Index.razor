@page "/orcamentos"
@inject IOrcamentoService OrcamentoService
@rendermode InteractiveServer


<PageTitle>Orcamentos</PageTitle>

@if (ListaOrcamentos.Count == 0)
{
    <p>Carregando...</p>
}
else
{
    <main>
        <div class="pb-2">
            <button @onclick="ShowModal" class="btn btn-secondary">Novo Orcamento</button>
        </div>

        <section>
            @if (ShowModalCreateOrcamento)
            {
                <ModalNovoOrcamento Model="@Model" ShowModalCreateOrcamento="@ShowModalCreateOrcamento"
                    CloseModal="HandleCloseModal" Show="show" Display="block" CarregarDados="CarregarDados" />
            }
        </section>

        <section>
            <table class="table table-sm table-secondary table-striped table-hover table-responsive">
                <thead class="table-dark text-secondary-emphasis">
                    <tr>
                        <th>
                            Cliente
                        </th>
                        <th>
                            Telefone
                        </th>
                        <th>
                            Veiculo
                        </th>
                        <th>
                            Placa
                        </th>
                        <th>
                            Chassi
                        </th>
                        <th>
                            Data Criação
                        </th>
                        <th>
                            Ações
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (ListaOrcamentos is not null)
                    {
                        @foreach (var orcamento in ListaOrcamentos)
                        {
                            <tr>
                                <td>
                                    @orcamento.Cliente
                                </td>
                                <td>
                                    @orcamento.Telefone
                                </td>
                                <td>
                                    @orcamento.Carro
                                </td>
                                <td>
                                    @orcamento.Placa
                                </td>
                                <td>
                                    @orcamento.Chassis
                                </td>
                                <td>
                                    @orcamento.CreatedAt.ToShortDateString()
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-info" @onclick="async () => await GetOrcamento(orcamento.Id!)">
                                        Editar
                                    </button>
                                    <a class="btn btn-sm btn-primary" href="/orcamentos/@orcamento.Id">
                                        Detalhes
                                    </a>
                                    <button @onclick="async () => await RemoveOrcamento(orcamento.Id!)" class="btn-sm btn-danger">
                                        Deletar
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td>Nenhum Orcamento</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    </main>
}




@code {

    public List<Models.Orcamento> ListaOrcamentos = [];

    public Models.Orcamento Model { get; set; } = new();
    public bool ShowModalCreateOrcamento { get; set; } = false;

    void ShowModal()
    {
        ShowModalCreateOrcamento = !ShowModalCreateOrcamento;
    }

    void ShowModal(Models.Orcamento orcamento)
    {
        Model = orcamento;
        ShowModalCreateOrcamento = !ShowModalCreateOrcamento;
    }

    private void HandleCloseModal(bool closeModal)
    {
        ShowModalCreateOrcamento = closeModal;
    }
    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }
    private async Task CarregarDados()
    {
        try
        {
            Model = new();
            ListaOrcamentos = await OrcamentoService.GetAsync();
        }
        catch
        {
            ListaOrcamentos = [];
        }
    }
    private async Task GetOrcamento(string id)
    {
        var orcamento = await OrcamentoService.GetByIdAsync(id);
        ShowModal(orcamento!);
    }
    private async Task RemoveOrcamento(string id)
    {
        await OrcamentoService.DeleteAsync(id);
        await CarregarDados();
    }

}